// Code generated by go-gen-json. DO NOT EDIT.
package examples

import (
	"bytes"
	"encoding/json/jsontext"
	"encoding/json/v2"
	"errors"
)

func (p *ComplexStruct) UnmarshalJSON(b []byte) error {
	d := jsontext.NewDecoder(bytes.NewReader(b))
	return p.UnmarshalJSONFrom(d)
}

func (p *ComplexStruct) UnmarshalJSONFrom(d *jsontext.Decoder) error {
	var (
		t   jsontext.Token
		err error
	)
	t, err = d.ReadToken()
	if err != nil {
		return err
	}
	if t.Kind() != '{' {
		return errors.New("expected object start, got " + string(t.Kind()))
	}
	for d.PeekKind() != '}' {
		t, err = d.ReadToken()
		if err != nil {
			return err
		}
		if t.Kind() != '"' {
			return errors.New("expected string, got " + string(t.Kind()))
		}
		switch t.String() {
		case "id":
			t, err = d.ReadToken()
			if err != nil {
				return err
			}
			if t.Kind() != '0' {
				return errors.New("expected number, got " + string(t.Kind()))
			}
			(*p).ID = int(t.Int())
		case "data":
			t, err = d.ReadToken()
			if err != nil {
				return err
			}
			if t.Kind() != '{' {
				return errors.New("expected object start, got " + string(t.Kind()))
			}
			(*p).Data = make(map[string]any)
			for d.PeekKind() != '}' {
				t, err = d.ReadToken()
				if err != nil {
					return err
				}
				if t.Kind() != '"' {
					return errors.New("expected string, got " + string(t.Kind()))
				}
				key := t.String()
				var value any
				// TODO: optimize this?
				if v, err := d.ReadValue(); err != nil {
					return err
				} else if err := json.Unmarshal(v, &value); err != nil {
					return nil
				}
				(*p).Data[key] = value
			}
			_, _ = d.ReadToken()
		case "numbers":
			t, err = d.ReadToken()
			if err != nil {
				return err
			}
			if t.Kind() != '[' {
				return errors.New("expected array start, got " + string(t.Kind()))
			}
			(*p).Numbers = nil
			for d.PeekKind() != ']' {
				var elem float64
				t, err = d.ReadToken()
				if err != nil {
					return err
				}
				if t.Kind() != '0' {
					return errors.New("expected number, got " + string(t.Kind()))
				}
				elem = float64(t.Float())
				(*p).Numbers = append((*p).Numbers, elem)
			}
			_, _ = d.ReadToken()
		case "metadata":
			(*p).Metadata = new(BasicStruct)
			t, err = d.ReadToken()
			if err != nil {
				return err
			}
			if t.Kind() != '{' {
				return errors.New("expected object start, got " + string(t.Kind()))
			}
			for d.PeekKind() != '}' {
				t, err = d.ReadToken()
				if err != nil {
					return err
				}
				if t.Kind() != '"' {
					return errors.New("expected string, got " + string(t.Kind()))
				}
				switch t.String() {
				case "name":
					t, err = d.ReadToken()
					if err != nil {
						return err
					} 
					if t.Kind() != '"' {
						return errors.New("expected string, got " + string(t.Kind()))
					}
					((*(*p).Metadata)).Name = string(t.String())
				case "age":
					t, err = d.ReadToken()
					if err != nil {
						return err
					}
					if t.Kind() != '0' {
						return errors.New("expected number, got " + string(t.Kind()))
					}
					((*(*p).Metadata)).Age = int(t.Int())
				case "email":
					t, err = d.ReadToken()
					if err != nil {
						return err
					} 
					if t.Kind() != '"' {
						return errors.New("expected string, got " + string(t.Kind()))
					}
					((*(*p).Metadata)).Email = string(t.String())
				case "active":
					t, err = d.ReadToken()
					if err != nil {
						return err
					}
					if t.Kind() != 't' && t.Kind() != 'f' {
						return errors.New("expected bool, got " + string(t.Kind()))
					}
					((*(*p).Metadata)).Active = t.Kind() == 't'
				}
			}
			_, _ = d.ReadToken()
		case "created_at":
			t, err = d.ReadToken()
			if err != nil {
				return nil
			}
			if err = (*p).CreatedAt.UnmarshalText([]byte(t.String())); err != nil {
				return err
			}
		}
	}
	_, _ = d.ReadToken()
	return nil
}
