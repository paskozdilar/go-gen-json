// Code generated by go-gen-json. DO NOT EDIT.
package examples

import (
	"bytes"
	"encoding/json/jsontext"
	"errors"
)

func (p *EmbeddedStruct) UnmarshalJSON(b []byte) error {
	d := jsontext.NewDecoder(bytes.NewReader(b))
	return p.UnmarshalJSONFrom(d)
}

func (p *EmbeddedStruct) UnmarshalJSONFrom(d *jsontext.Decoder) error {
	var (
		t   jsontext.Token
		err error
	)
	t, err = d.ReadToken()
	if err != nil {
		return err
	}
	if t.Kind() != '{' {
		return errors.New("expected object start, got " + string(t.Kind()))
	}
	for d.PeekKind() != '}' {
		t, err = d.ReadToken()
		if err != nil {
			return err
		}
		if t.Kind() != '"' {
			return errors.New("expected string, got " + string(t.Kind()))
		}
		switch t.String() {
		case "name":
			t, err = d.ReadToken()
			if err != nil {
				return err
			} 
			if t.Kind() != '"' {
				return errors.New("expected string, got " + string(t.Kind()))
			}
			((*p).BasicStruct).Name = string(t.String())
		case "age":
			t, err = d.ReadToken()
			if err != nil {
				return err
			}
			if t.Kind() != '0' {
				return errors.New("expected number, got " + string(t.Kind()))
			}
			((*p).BasicStruct).Age = int(t.Int())
		case "email":
			t, err = d.ReadToken()
			if err != nil {
				return err
			} 
			if t.Kind() != '"' {
				return errors.New("expected string, got " + string(t.Kind()))
			}
			((*p).BasicStruct).Email = string(t.String())
		case "active":
			t, err = d.ReadToken()
			if err != nil {
				return err
			}
			if t.Kind() != 't' && t.Kind() != 'f' {
				return errors.New("expected bool, got " + string(t.Kind()))
			}
			((*p).BasicStruct).Active = t.Kind() == 't'
		case "id":
			t, err = d.ReadToken()
			if err != nil {
				return err
			}
			if t.Kind() != '0' {
				return errors.New("expected number, got " + string(t.Kind()))
			}
			((*p).NestedStruct).ID = int(t.Int())
		case "profile":
			t, err = d.ReadToken()
			if err != nil {
				return err
			}
			if t.Kind() != '[' {
				return errors.New("expected array start, got " + string(t.Kind()))
			}
			((*p).NestedStruct).Profile = nil
			for d.PeekKind() != ']' {
				var elem BasicStruct
				t, err = d.ReadToken()
				if err != nil {
					return err
				}
				if t.Kind() != '{' {
					return errors.New("expected object start, got " + string(t.Kind()))
				}
				for d.PeekKind() != '}' {
					t, err = d.ReadToken()
					if err != nil {
						return err
					}
					if t.Kind() != '"' {
						return errors.New("expected string, got " + string(t.Kind()))
					}
					switch t.String() {
					case "name":
						t, err = d.ReadToken()
						if err != nil {
							return err
						} 
						if t.Kind() != '"' {
							return errors.New("expected string, got " + string(t.Kind()))
						}
						(elem).Name = string(t.String())
					case "age":
						t, err = d.ReadToken()
						if err != nil {
							return err
						}
						if t.Kind() != '0' {
							return errors.New("expected number, got " + string(t.Kind()))
						}
						(elem).Age = int(t.Int())
					case "email":
						t, err = d.ReadToken()
						if err != nil {
							return err
						} 
						if t.Kind() != '"' {
							return errors.New("expected string, got " + string(t.Kind()))
						}
						(elem).Email = string(t.String())
					case "active":
						t, err = d.ReadToken()
						if err != nil {
							return err
						}
						if t.Kind() != 't' && t.Kind() != 'f' {
							return errors.New("expected bool, got " + string(t.Kind()))
						}
						(elem).Active = t.Kind() == 't'
					default:
						d.SkipValue()
					}
				}
				_, _ = d.ReadToken()
				((*p).NestedStruct).Profile = append(((*p).NestedStruct).Profile, elem)
			}
			_, _ = d.ReadToken()
		case "tags":
			t, err = d.ReadToken()
			if err != nil {
				return err
			}
			if t.Kind() != '[' {
				return errors.New("expected array start, got " + string(t.Kind()))
			}
			((*p).NestedStruct).Tags = nil
			for d.PeekKind() != ']' {
				var elem string
				t, err = d.ReadToken()
				if err != nil {
					return err
				} 
				if t.Kind() != '"' {
					return errors.New("expected string, got " + string(t.Kind()))
				}
				elem = string(t.String())
				((*p).NestedStruct).Tags = append(((*p).NestedStruct).Tags, elem)
			}
			_, _ = d.ReadToken()
		case "extra_field":
			t, err = d.ReadToken()
			if err != nil {
				return err
			} 
			if t.Kind() != '"' {
				return errors.New("expected string, got " + string(t.Kind()))
			}
			(*p).ExtraField = string(t.String())
		default:
			d.SkipValue()
		}
	}
	_, _ = d.ReadToken()
	return nil
}
